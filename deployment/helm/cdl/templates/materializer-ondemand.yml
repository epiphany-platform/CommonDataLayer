apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-materializer-ondemand
  labels:
    app: {{ .Release.Name }}-materializer-ondemand
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-materializer-ondemand
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-materializer-ondemand
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '51805'
        prometheus.io/path: '/metrics'
    spec:
      containers:
      - name: cdl-materializer-ondemand
        image: "{{ .Values.global.imageRepositoryPath }}cdl-materializer-ondemand:{{ .Values.global.imageVersion }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        command: ["/bin/materializer-ondemand"]
        env:
        - name: MATERIALIZER_ONDEMAND_INPUT_PORT
          value: "6400"
        - name: MATERIALIZER_ONDEMAND_SERVICES__OBJECT_BUILDER_URL
          value: "http://{{ .Release.Name }}-object-builder:6400"
        - name: MATERIALIZER_ONDEMAND_LOG__RUST_LOG
          value: "info,materializer_ondemand=trace"
        - name: MATERIALIZER_ONDEMAND_MONITORING__OTEL_SERVICE_NAME
          value: "materializer-ondemand"
        - name: OTEL_EXPORTER_JAEGER_AGENT_HOST
          value: {{ .Values.global.jaegerAgentHost }}
        - name: OTEL_EXPORTER_JAEGER_AGENT_PORT
          value: "{{ .Values.global.jaegerAgentPort }}"
        ports:
        - containerPort: 51805
      imagePullSecrets:
        - name: {{ .Values.global.cdlImagePullSecrets }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-materializer-ondemand
spec:
  type: ClusterIP
  selector:
    app: {{ .Release.Name }}-materializer-ondemand
  ports:
    - port: 6400
      targetPort: 6400
