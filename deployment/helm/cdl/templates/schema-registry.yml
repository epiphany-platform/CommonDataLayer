apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-schema-registry
  labels:
    app: {{ .Release.Name }}-schema-registry
spec:
  serviceName: {{ .Release.Name }}-schema-registry
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-schema-registry
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-schema-registry
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '51805'
        prometheus.io/path: '/metrics'
    spec:
      containers:
      - name: cdl-schema-registry
        image: "{{ .Values.global.imageRepositoryPath }}cdl-schema-registry:{{ .Values.global.imageVersion }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        command: ["/bin/schema-registry"]
        env:
        - name: INPUT_PORT
          value: "6400"
        - name: POSTGRES_USERNAME
          value: {{ .Values.schemaRegistry.postgresUsername }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.schemaRegistry.postgresPassword }}
        - name: POSTGRES_HOST
          value: {{ .Values.schemaRegistry.postgresHost }}
        - name: POSTGRES_PORT
          value: "{{ .Values.schemaRegistry.postgresPort }}"
        - name: POSTGRES_DBNAME
          value: {{ .Values.schemaRegistry.postgresDbname }}
        - name: REPLICATION_ROLE
          value: "slave"
        {{- if eq .Values.global.communicationMethod "kafka" }}
        - name: COMMUNICATION_METHOD
          value: "kafka"
        - name: KAFKA_BROKERS
          value: "{{ .Values.global.kafkaBrokers }}"
        - name: KAFKA_GROUP_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        {{- else if eq .Values.global.communicationMethod "amqp" }}
        - name: COMMUNICATION_METHOD
          value: "amqp"
        - name: AMQP_CONNECTION_STRING
          value: "{{ .Values.global.amqpConnectionString }}"
        - name: AMQP_CONSUMER_TAG
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        {{- else }}
        - name: COMMUNICATION_METHOD
          value: "grpc"
        {{- end }}
        - name: RUST_LOG
          value: "info,schema_registry=debug"
        ports:
        - containerPort: 51805
        # readinessProbe:
        #   httpGet:
        #     path: /status/readiness
        #     port: 3000
        #   initialDelaySeconds: 3
        #   periodSeconds: 3
        # livenessProbe:
        #   httpGet:
        #     path: /status/health
        #     port: 3000
        #   initialDelaySeconds: 3
        #   periodSeconds: 3
        # startupProbe:
        #   httpGet:
        #     path: /status/startup
        #     port: 3000
        #   failureThreshold: 6
        #   periodSeconds: 5
      imagePullSecrets:
      - name: {{ .Values.global.cdlImagePullSecrets }}


---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-schema-registry
spec:
  type: ClusterIP
  selector:
    app: {{ .Release.Name }}-schema-registry
  ports:
    - port: 6400
      targetPort: 6400

