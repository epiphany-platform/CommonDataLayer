apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-schema-registry
  labels:
    app: {{ .Release.Name }}-schema-registry
spec:
  serviceName: {{ .Release.Name }}-schema-registry
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-schema-registry
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-schema-registry
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '51805'
        prometheus.io/path: '/metrics'
    spec:
      containers:
      - name: cdl-schema-registry
        image: "{{ .Values.global.imageRepositoryPath }}cdl-schema-registry:{{ .Values.global.imageVersion }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        command: ["/bin/schema-registry"]
        env:
        - name: SCHEMA_REGISTRY_INPUT_PORT
          value: "6400"
        - name: SCHEMA_REGISTRY_POSTGRES__USERNAME
          value: {{ .Values.schemaRegistry.postgresUsername }}
        - name: SCHEMA_REGISTRY_POSTGRES__PASSWORD
          value: {{ .Values.schemaRegistry.postgresPassword }}
        - name: SCHEMA_REGISTRY_POSTGRES__HOST
          value: {{ .Values.schemaRegistry.postgresHost }}
        - name: SCHEMA_REGISTRY_POSTGRES__PORT
          value: "{{ .Values.schemaRegistry.postgresPort }}"
        - name: SCHEMA_REGISTRY_POSTGRES__DBNAME
          value: {{ .Values.schemaRegistry.postgresDbname }}
        - name: SCHEMA_REGISTRY_POSTGRES__SCHEMA
          value: {{ .Values.schemaRegistry.postgresSchema }}
        {{- if eq .Values.global.communicationMethod "kafka" }}
        - name: SCHEMA_REGISTRY_COMMUNICATION_METHOD
          value: "kafka"
        - name: SCHEMA_REGISTRY_KAFKA__BROKERS
          value: "{{ .Values.global.kafkaBrokers }}"
        {{- else if eq .Values.global.communicationMethod "amqp" }}
        - name: SCHEMA_REGISTRY_COMMUNICATION_METHOD
          value: "amqp"
        - name: SCHEMA_REGISTRY_AMQP__EXCHANGE_URL
          value: "{{ .Values.global.amqpConnectionString }}"
        {{- else }}
        - name: SCHEMA_REGISTRY_COMMUNICATION_METHOD
          value: "grpc"
        {{- end }}
        - name: SCHEMA_REGISTRY_LOG__RUST_LOG
          value: "info,schema_registry=debug"
        - name: SCHEMA_REGISTRY_MONITORING__OTEL_SERVICE_NAME
          value: "schema-registry"
        - name: SCHEMA_REGISTRY_SERVICES__EDGE_REGISTRY_URL
          value: "http://{{ .Release.Name }}-edge-registry:{{ .Values.edgeRegistry.rpcPort }}"
        ports:
        - containerPort: 51805
        readinessProbe:
          httpGet:
            path: /status/readiness
            port: 3000
          initialDelaySeconds: 3
          periodSeconds: 3
        livenessProbe:
          httpGet:
            path: /status/health
            port: 3000
          initialDelaySeconds: 3
          periodSeconds: 3
        startupProbe:
          httpGet:
            path: /status/startup
            port: 3000
          failureThreshold: 6
          periodSeconds: 5
      imagePullSecrets:
      - name: {{ .Values.global.cdlImagePullSecrets }}


---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-schema-registry
spec:
  type: ClusterIP
  selector:
    app: {{ .Release.Name }}-schema-registry
  ports:
    - port: 6400
      targetPort: 6400

