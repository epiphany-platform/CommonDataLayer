apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api
  labels:
    app: {{ .Release.Name }}-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-api
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-api
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '51805'
        prometheus.io/path: '/metrics'
    spec:
      containers:
      - name: cdl-api
        image: "{{ .Values.global.imageRepositoryPath }}cdl-api:{{ .Values.global.imageVersion }}"
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        command: ["/bin/api"]
        env:
        - name: API_SERVICES__SCHEMA_REGISTRY_URL
          value: "http://{{ .Release.Name }}-schema-registry:6400"
        - name: API_SERVICES__QUERY_ROUTER_URL
          value: "http://{{ .Release.Name }}-query-router:6401"
        - name: API_SERVICES__EDGE_REGISTRY_URL
          value: "http://{{ .Release.Name }}-edge-registry:{{ .Values.edgeRegistry.rpcPort }}"
        - name: API_SERVICES__ON_DEMAND_MATERIALIZER_URL
          value: "http://{{ .Release.Name }}-materializer-ondemand:6400"
        - name: API_INPUT_PORT
          value: "6402"
        - name: API_NOTIFICATION_CONSUMER__SOURCE
          value: "{{ .Values.global.reportDestination }}"
        - name: API_INSERT_DESTINATION
          value: "{{ .Values.dataRouter.inputSource }}"
        {{- if eq .Values.global.communicationMethod "kafka" }}
        - name: API_COMMUNICATION_METHOD
          value: "kafka"
        - name: API_KAFKA__BROKERS
          value: "{{ .Values.global.kafkaBrokers }}"
        - name: API_KAFKA__GROUP_ID
          value: "api"
        {{- else if eq .Values.global.communicationMethod "amqp" }}
        - name: API_COMMUNICATION_METHOD
          value: "amqp"
        - name: API_AMQP__EXCHANGE_URL
          value: "{{ .Values.global.amqpConnectionString }}"
        - name: API_AMQP__TAG
          value: "api"
        {{- else }}
        - name: API_COMMUNICATION_METHOD
          value: "grpc"
        {{- end }}
        - name: API_LOG__RUST_LOG
          value: "info,api=debug"
        - name: OTEL_EXPORTER_JAEGER_AGENT_HOST
          value: {{ .Values.global.jaegerAgentHost }}
        - name: OTEL_EXPORTER_JAEGER_AGENT_PORT
          value: "{{ .Values.global.jaegerAgentPort }}"
        ports:
        - containerPort: 51805
      imagePullSecrets:
        - name: {{ .Values.global.cdlImagePullSecrets }}


---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-api
spec:
  type: NodePort
  selector:
    app: {{ .Release.Name }}-api
  ports:
    - port: 6402
      targetPort: 6402
      nodePort: {{ .Values.api.port }}

