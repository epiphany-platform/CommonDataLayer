###
# This is example docker compose that sets up local developer environment.
# Please refer to README.md for instructions on how to run it.
###

version: "2.2"

services:
  schema_registry:
    image: cdl-schema-registry:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=schema-registry
        - ENV=DEV
    command: /bin/schema-registry
    ports:
      - "50101:50101"
    environment:
      REPLICATION_ROLE: "master"
      COMMUNICATION_METHOD: "grpc"
      INPUT_PORT: "50101"
      IMPORT_FILE: "/var/data/schema.json"
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DBNAME: postgres
      POSTGRES_SCHEMA: cdl
      RUST_LOG: info,schema_registry=trace
      OTEL_SERVICE_NAME: "schema-registry"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"
    volumes:
      - ./setup/schema_registry/initial-schema.grpc.json:/var/data/schema.json

  data_router:
    image: cdl-data-router:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=data-router
        - ENV=DEV
    command: /bin/data-router
    ports:
      - "50102:50102"
    environment:
      COMMUNICATION_METHOD: "grpc"
      GRPC_PORT: "50102"
      SCHEMA_REGISTRY_ADDR: "http://schema_registry:50101"
      CACHE_CAPACITY: "1000"
      RUST_LOG: info,data_router=trace
      OTEL_SERVICE_NAME: "data-router"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

  query_router:
    image: cdl-query-router:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=query-router
        - ENV=DEV
    command: "/bin/query-router"
    ports:
      - "50103:50103"
    environment:
      CACHE_CAPACITY: 1024
      INPUT_PORT: 50103
      SCHEMA_REGISTRY_ADDR: "http://schema_registry:50101"
      RUST_LOG: info,query_router=trace
      OTEL_SERVICE_NAME: "query-router"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

  object_builder:
    image: cdl-object-builder:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=object-builder
        - ENV=DEV
    command: "/bin/object-builder"
    ports:
      - "50107:50107"
    environment:
      INPUT_PORT: "50107"
      SCHEMA_REGISTRY_ADDR: "http://schema_registry:50101"
      RUST_LOG: info,object_builder=trace

  materializer_ondemand:
    image: cdl-materializer-ondemand:latest
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=materializer-ondemand
        - ENV=DEV
    command: "/bin/materializer-ondemand"
    ports:
      - "50108:50108"
    environment:
      INPUT_PORT: "50108"
      OBJECT_BUILDER_ADDR: "http://object_builder:50107"
      RUST_LOG: info,materializer_ondemand=trace
      OTEL_SERVICE_NAME: "materializer-ondemand"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

  web_api:
    image: cdl-api:latest
    command: "/bin/api"
    ports:
      - "50106:50106"
    build:
      context: ../..
      dockerfile: Dockerfile
      args:
        - BIN=api
    environment:
      INPUT_PORT: 50106
      RUST_LOG: info,api=trace
      SCHEMA_REGISTRY_ADDR: "http://schema_registry:50101"
      EDGE_REGISTRY_ADDR: "http://edge_registry:50110"
      ON_DEMAND_MATERIALIZER_ADDR: "http://materializer_ondemand:50108"
      QUERY_ROUTER_ADDR: "http://query_router:50103"
      COMMUNICATION_METHOD: "grpc"
      INSERT_DESTINATION: "http://data_router:50102"
      OTEL_SERVICE_NAME: "api"
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "jaeger"
      OTEL_EXPORTER_JAEGER_AGENT_PORT: "6831"

networks:
  compose_default:
    external: true
