syntax = "proto2";

package schema_registry;

service SchemaRegistry {
    rpc AddSchema (NewSchema) returns (Id);
    rpc AddSchemaVersion (NewSchemaVersion) returns (Empty);
    rpc UpdateSchema (SchemaMetadataUpdate) returns (Empty);
    rpc AddViewToSchema (NewView) returns (Id);
    rpc UpdateView (ViewUpdate) returns (Empty);
    rpc GetSchemaMetadata (Id) returns (SchemaMetadata);
    rpc GetSchemaVersions (Id) returns (SchemaVersions);
    rpc GetSchemaDefinition (VersionedId) returns (SchemaDefinition);
    rpc GetFullSchema (Id) returns (FullSchema);
    rpc GetView (Id) returns (FullView);
    rpc GetAllSchemas (Empty) returns (Schemas);
    rpc GetAllFullSchemas (Empty) returns (FullSchemas);
    rpc GetAllViewsOfSchema (Id) returns (SchemaViews);
    rpc GetAllViewsByRelation (Id) returns (SchemaViews);
    rpc GetBaseSchemaOfView (Id) returns (Schema);
    rpc ValidateValue (ValueToValidate) returns (Errors);
    rpc WatchAllSchemaUpdates (Empty) returns (stream Schema);
    rpc Ping (Empty) returns (Empty);
}

message NewSchema {
    required SchemaMetadata metadata = 1;
    required bytes definition = 2;
}

message SchemaMetadata {
    required string name = 1;
    required string insert_destination = 2;
    required string query_address = 3;
    required SchemaType schema_type = 4;
}

message SchemaMetadataPatch {
    optional string name = 1;
    optional string query_address = 2;
    optional string insert_destination = 3;
    optional SchemaType schema_type = 4;
}

message Schema {
    required string id = 1;
    required SchemaMetadata metadata = 2;
}

message View {
    required string id = 1;
    required string name = 2;
    required string materializer_address = 3;
    required string materializer_options = 4;
    map<string, string> fields = 5;
    optional Filter filters = 6;
    repeated Relation relations = 7;
}

message Filter {
    oneof filter_kind {
        SimpleFilter simple = 1;
        ComplexFilter complex = 2;
    }
}

message SimpleFilter {
    required FilterOperator operator = 1;
    required FilterValue lhs = 2;
    optional FilterValue rhs = 3;
}

message ComplexFilter {
    required LogicOperator operator = 1;
    repeated Filter operands = 2;
}

message LogicOperator {
    enum Operator {
        And = 0;
        Or = 1;
    }
    required Operator operator = 1;
}

message FilterOperator {
    enum Operator {
        EqualsOp = 0;
    }
    required Operator operator = 1;
}

message FilterValue {
    oneof filter_value {
        SchemaFieldFilter schema_field = 1;
        ViewPathFilter view_path = 2;
        RawValueFilter raw_value = 3;
        ComputedFilter computed = 4;
    }
}

message SchemaFieldFilter {
    required uint32 schema_id = 1;
    required string field_path = 2;
}

message ViewPathFilter {
    required string field_path = 1;
}

message RawValueFilter {
    required string value = 1;
}

message ComputedFilter {
    required Computation computation = 1;
}

message Computation {
    required ComputationOperator operator = 1;
    required Computation lhs = 2;
    optional Computation rhs = 3;
}

message ComputationOperator {
    oneof computation_operator {
        RawValueComputation raw_value = 1;
        FieldValueComputation field_value = 2;
        EqualsComputation equals_computation = 3;
    }
}

message RawValueComputation {
    required string value = 1;
}

message FieldValueComputation {
    optional string base_schema = 1;
    required string field_path = 2;
}

message EqualsComputation {}

message FullView {
    required string id = 1;
    required string base_schema_id = 2;
    required string name = 3;
    required string materializer_address = 4;
    required string materializer_options = 5;
    map<string, string> fields = 6;
    optional Filter filters = 7;
    repeated Relation relations = 8;
}

message NewView {
    optional string view_id = 1;
    required string base_schema_id = 2;
    required string name = 3;
    required string materializer_address = 4;
    required string materializer_options = 5;
    map<string, string> fields = 6;
    optional Filter filters = 7;
    repeated Relation relations = 8;
}

message Relation {
    required string global_id = 1;
    required uint32 local_id = 2;
    required SearchFor search_for = 3;
    repeated Relation relations = 4;
}

message SearchFor {
    enum Direction {
        Parents = 0;
        Children = 1;
    }
    required Direction search_for = 1;
}

message ViewUpdate {
    required string id = 1;
    optional string name = 2;
    optional string materializer_address = 3;
    required string materializer_options = 4;
    map<string, string> fields = 5;
    required bool update_fields = 6;
    optional Filter filters = 7;
    repeated Relation relations = 8;
    required bool update_filters = 9;
    required bool update_relations = 10;
}

message FullSchema {
    required string id = 1;
    required SchemaMetadata metadata = 2;
    repeated SchemaDefinition definitions = 3;
    repeated View views = 4;
}

message NewSchemaVersion {
    required string id = 1;
    required SchemaDefinition definition = 2;
}

message SchemaMetadataUpdate {
    required string id = 1;
    required SchemaMetadataPatch patch = 2;
}

message VersionedId {
    required string id = 1;
    optional string version_req = 2;
}

message SchemaDefinition {
    required string version = 1;
    required bytes definition = 2;
}

message Id {
    required string id = 1;
}

message SchemaVersions {
    repeated string versions = 1;
}

message Schemas {
    repeated Schema schemas = 1;
}

message FullSchemas {
    repeated FullSchema schemas = 1;
}

message SchemaViews {
    repeated FullView views = 1;
}

message ValueToValidate {
    required VersionedId schema_id = 1;
    required bytes value = 2;
}

message Errors {
    repeated string errors = 1;
}

message SchemaType {
    enum Type {
        DocumentStorage = 0;
        Timeseries = 1;
    }
    required Type schema_type = 1;
}

message Empty {}
