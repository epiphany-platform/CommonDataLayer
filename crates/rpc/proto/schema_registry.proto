syntax = "proto2";

package schema_registry;

service SchemaRegistry {
    rpc AddSchema (NewSchema) returns (Id);
    rpc AddSchemaVersion (NewSchemaVersion) returns (Empty);
    rpc UpdateSchema (SchemaMetadataUpdate) returns (Empty);
    rpc AddViewToSchema (NewView) returns (Id);
    rpc UpdateView (ViewUpdate) returns (Empty);
    rpc GetSchemaMetadata (Id) returns (SchemaMetadata);
    rpc GetSchemaVersions (Id) returns (SchemaVersions);
    rpc GetSchemaDefinition (VersionedId) returns (SchemaDefinition);
    rpc GetFullSchema (Id) returns (FullSchema);
    rpc GetView (Id) returns (View);
    rpc GetAllSchemas (Empty) returns (Schemas);
    rpc GetAllFullSchemas (Empty) returns (FullSchemas);
    rpc GetAllViewsOfSchema (Id) returns (SchemaViews);
    rpc ValidateValue (ValueToValidate) returns (Errors);
    rpc WatchAllSchemaUpdates (Empty) returns (stream Schema);
}

message NewSchema {
    required SchemaMetadata metadata = 1;
    required bytes definition = 2;
}

message SchemaMetadata {
    required string name = 1;
    required string query_address = 2;
    required string insert_destination = 3;
    required SchemaType.Type schema_type = 4;
}

message SchemaMetadataPatch {
    optional string name = 1;
    optional string query_address = 2;
    optional string insert_destination = 3;
    optional SchemaType.Type schema_type = 4;
}

message Schema {
    required string id = 1;
    required SchemaMetadata metadata = 2;
}

message View {
    required string id = 1;
    required string name = 2;
    required string materializer_address = 3;
    map<string, string> fields = 4;
}

message NewView {
    required string schema_id = 1;
    required string name = 2;
    required string materializer_address = 3;
    map<string, string> fields = 4;
}

message ViewUpdate {
    required string id = 1;
    optional string name = 2;
    optional string materializer_address = 3;
    map<string, string> fields = 4;
    required bool update_fields = 5;
}

message FullSchema {
    required string id = 1;
    required SchemaMetadata metadata = 2;
    repeated SchemaDefinition definitions = 3;
    repeated View views = 4;
}

message NewSchemaVersion {
    required string id = 1;
    required SchemaDefinition definition = 2;
}

message SchemaMetadataUpdate {
    required string id = 1;
    required SchemaMetadataPatch patch = 2;
}

message VersionedId {
    required string id = 1;
    optional string version_req = 2;
}

message SchemaDefinition {
    required string version = 1;
    required bytes definition = 2;
}

message Id {
    required string id = 1;
}

message SchemaVersions {
    repeated string versions = 1;
}

message Schemas {
    repeated Schema schemas = 1;
}

message FullSchemas {
    repeated FullSchema schemas = 1;
}

message SchemaViews {
    repeated View views = 1;
}

message ValueToValidate {
    required VersionedId schema_id = 1;
    required bytes value = 2;
}

message Errors {
    repeated string errors = 1;
}

message SchemaType {
    enum Type {
        DocumentStorage = 0;
        Timeseries = 1;
    }
    required Type schema_type = 1;
}

message Empty {}
