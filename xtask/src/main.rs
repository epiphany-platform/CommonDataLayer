use anyhow::{Context, Result};
use itertools::Itertools;
use pico_args::Arguments;
use std::path::PathBuf;
use xshell::cmd;

fn main() -> Result<()> {
    let mut args = Arguments::from_env();
    let subcmd = args.subcommand()?.unwrap_or_default();

    goto_root()?;

    match subcmd.as_str() {
        "codegen" => {
            let protos = [
                "proto/query_service.proto",
                "proto/query_service_ts.proto",
                "proto/schema_registry.proto",
                "proto/edge_registry.proto",
                "proto/object_builder.proto",
                "proto/materializer.proto",
                "proto/common.proto",
                "proto/generic.proto",
            ];
            codegen(&protos)?;
        }
        _ => eprintln!("cargo xtask codegen"),
    }

    Ok(())
}

fn codegen(protos: &[&str]) -> Result<()> {
    println!("cd crates/rpc");
    let cwd = std::env::current_dir()?;
    std::env::set_current_dir(cwd.join("crates/rpc/"))?;

    println!("mkdir -p src/codegen");
    cmd!("mkdir -p src/codegen").read()?;

    println!("build protos");
    tonic_build::configure()
        .out_dir("src/codegen")
        .compile(&protos, &["proto/"])?;

    let files = xshell::read_dir("src/codegen")?;

    let mods = files
        .iter()
        .filter_map(|file| file.file_name())
        .filter_map(|filename| filename.to_str())
        .filter(|filename| *filename != "mod.rs")
        .map(|filename| filename.trim_end_matches(".rs"))
        .map(|name| format!("pub mod {};", name))
        .join("\n");

    println!("write src/codegen/mod.rs");
    xshell::write_file(
        "src/codegen/mod.rs",
        format!(
            r#"
// CAUTION: This module was automatically generated by `cargo xtask codegen`. Do not modify it.

{}"#,
            mods
        ),
    )?;

    println!("cargo fmt");
    cmd!("cargo fmt").read()?;

    println!("cd ../../");
    std::env::set_current_dir(cwd)?;

    Ok(())
}

fn goto_root() -> Result<()> {
    let git = PathBuf::from(".git");
    loop {
        if git.exists() {
            break Ok(());
        }
        let cwd = std::env::current_dir()?;
        let parent = cwd.parent().context("Could not find .git root")?;
        std::env::set_current_dir(parent)?;
    }
}
